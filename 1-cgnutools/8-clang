# cgnutools: S	age0 LLVM+clang
# Build as cmlfs
#
# * Build stage0 clang/clang++ with compiler-rt, lld, libunwind, libcxxabi, and libcxx
#   in LLVM source directory

# Truncate directory name for easier typing... 
cd $CMLFS/sources       && \
mv llvm-12.0.0.src llvm && \
export LLVMSRC=${CMLFS}/sources/llvm && \

cd ${LLVMSRC}
# make sure compiler-rt, libcxx, libcxxabi, libunwind are unpacked in ${{LLVMSRC}/projects
# and clang & lld in ${LLVMSRC}/tools.
cd projects && \
tar xf ../../pkgs/compiler-rt-12.0.0.src.tar.xz && \
mv compiler-rt-12.0.0.src compiler-rt           && \
tar xf ../../pkgs/libcxx-12.0.0.src.tar.xz      && \
mv libcxx-12.0.0.src libcxx                     && \
tar xf ../../pkgs/libcxxabi-12.0.0.src.tar.xz   && \
mv libcxxabi-12.0.0.src libcxxabi               && \
tar xf ../../pkgs/libunwind-12.0.0.src.tar.xz   && \
mv libunwind-12.0.0.src libunwind               && \
cd ${LLVMSRC}/tools && \
tar xf ../../pkgs/clang-12.0.0.src.tar.xz 
mv clang-12.0.0.src clang
tar xf ../../pkgs/lld-12.0.0.src.tar.xz 
mv lld-12.0.0.src lld

# Apply patches from void linux
cd ${LLVMSRC}/projects/compiler-rt
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-aarch64-ucontext.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-sanitizer-ppc64-musl.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-size_t.patch 
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-xray-ppc64-musl.patch
cd ${LLVMSRC}/projects/libcxx
patch -Np1 -i ../../../patches/llvm12-libcxx-void/libcxx-musl.patch 
patch -Np1 -i ../../../patches/llvm12-libcxx-void/libcxx-ppc.patch 
patch -Np1 -i ../../../patches/llvm12-libcxx-void/libcxx-ssp-nonshared.patch 
cd ${LLVMSRC}/projects/libunwind
patch -Np1 -i ../../../patches/llvm12-libunwind-void/libunwind-ppc32.patch
cd ${LLVMSRC}/tools/clang
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-001-fix-unwind-chain-inclusion.patch 
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-002-add-musl-triples.patch 
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-003-ppc64-dynamic-linker-path.patch 
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-004-ppc64-musl-elfv2.patch
cd ${LLVMSRC}
patch  -Np1 -i ../patches/llvm12-void/llvm-001-musl.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-002-musl-ppc64-elfv2.patch 
patch  -Np1 -i ../patches/llvm12-void/llvm-003-ppc-secureplt.patch 
patch  -Np1 -i ../patches/llvm12-void/llvm-004-override-opt.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-005-ppc-bigpic.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-006-aarch64-mf_exec.patch 

# Disable sanitizers for musl systems, per Void Linux... fixes early build failure
sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake

# Fix missing header for lld, https://bugs.llvm.org/show_bug.cgi?id=49228
mkdir -pv tools/lld/include/mach-o
cp -v projects/libunwind/include/mach-o/compact_unwind_encoding.h tools/lld/include/mach-o

# Set flags to greatly reduce debugging symbols
export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1" 

# Update host/target triple detection
cp -v ../files/config.guess-musl cmake/config.guess

# Set the compiler and linker flags...
export  CONFIG_TOOLS="-DCMAKE_C_COMPILER=${CMLFS_TARGET}-gcc " 
export CONFIG_TOOLS+="-DCMAKE_CXX_COMPILER=${CMLFS_TARGET}-g++ " 
export CONFIG_TOOLS+="-DCMAKE_EXE_LINKER_FLAGS='-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1' " 
export CONFIG_TOOLS+="-DCMAKE_SHARED_LINKER_FLAGS='-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1' " 
export CONFIG_TOOLS+="-DCLANG_DEFAULT_LINKER=/cgnutools/bin/ld.lld "  

# Set the truples...
export  CONFIG_TRUPLES="-DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl " 
export CONFIG_TRUPLES+="-DLLVM_HOST_TRIPLE=x86_64-pc-linux-musl " 
export CONFIG_TRUPLES+="-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl " 

# Set the flags for Compiler-rt...
export  CONFIG_CRT="-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_SANITIZERS=OFF"
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_XRAY=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_PROFILE=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_LIBFUZZER=OFF " 
export CONFIG_CRT+="-DCOMPILER_RT_CAN_EXECUTE_TESTS=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_HWASAN_WITH_INTERCEPTORS=OFF "

# Set the flags for clang:
export  CONFIG_CLANG="-DCLANG_DEFAULT_CXX_STDLIB=libc++ "
export CONFIG_CLANG+="-DCLANG_DEFAULT_UNWINDLIB=libunwind "
export CONFIG_CLANG+="-DCLANG_DEFAULT_RTLIB=compiler-rt "
export CONFIG_CLANG+="-DCLANG_ENABLE_STATIC_ANALYZER=OFF "
export CONFIG_CLANG+="-DCLANG_ENABLE_ARCMT=OFF "

# Set paths...
export  CONFIG_PATHS="-DBacktrace_HEADER=/cgnutools/include/execinfo.h "
export CONFIG_PATHS+="-DBacktrace_LIBRARY=/cgnutools/lib/libexecinfo.so.1 " 
export CONFIG_PATHS+="-DICONV_LIBRARY_PATH=/cgnutools/lib/libc.so "

# Turn off unwanted features, docs and tests
export  BUILD_OFF="-DLLVM_BUILD_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_GO_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_DOCS=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_OCAMLDOC=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_EXAMPLES=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_BENCHMARKS=OFF "
export BUILD_OFF+="-DLIBCXX_ENABLE_DEBUG_MODE_SUPPORT=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_BACKTRACES=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBPFM=OFF "
export BUILD_OFF+="-DLIBCXX_INCLUDE_BENCHMARKS=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_CRASH_OVERRIDES=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBEDIT=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBXML2=OFF "

# Configure source
cmake -B build  \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX="/cgnutools" \
      -DLLVM_ENABLE_LIBCXX=ON \
      -DLLVM_TARGET_ARCH="X86" \
      -DLLVM_TARGETS_TO_BUILD="X86" \
      -DLIBCXX_HAS_MUSL_LIBC=ON \
      -DDEFAULT_SYSROOT="/cgnutools" \
      ${CONFIG_TOOLS} ${CONFIG_TRUPLES} \
      ${CONFIG_CRT}   ${CONFIG_CLANG} \
      ${CONFIG_PATHS}  ${BUILD_OFF}

# Now ready to build
make -C build && \

# Install to cgnutools
cd build && cmake -DCMAKE_INSTALL_PREFIX=/cgnutools -P cmake_install.cmake

# clean up
unset CFLAGS CXFLAGS
cd .. && rm -rf build

# Set LLD as default toolchain linker
ln -sv lld /cgnutools/bin/ld

# Since LLVM+clang still have GCC dependancies, add the GCC libraries in the search
# paths of the toolchain's dynamic linker:
# echo "/cgnutools/${CMLFS_TARGET}/lib" >> /cgnutools/etc/ld-musl-$(uname -m).path

# Configure clang to build binaries with /llvmtools/lib/ld-musl-x86_64.so.1 instead
# of /lib/ld-musl-x86_64.so.1. This is similar in Musl-LFS/LFS when gcc specs 
# file is modified to set the dynamic linker in /tools instead of host's /lib
ln -sv clang-12   /cgnutools/bin/${CMLFS_TARGET}-clang
ln -sv clang-12   /cgnutools/bin/${CMLFS_TARGET}-clang++
cat > /cgnutools/bin/${CMLFS_TARGET}.cfg << "EOF"
-Wl,-dynamic-linker /llvmtools/lib/ld-musl-x86_64.so.1
EOF

# Configure cross-GCC of cgnutools to match the same output as clang
# Dump current specs 
export SPECFILE=`dirname $(${CMLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
${CMLFS_TARGET}-gcc -dumpspecs > specs

# Modify dumped specs file 
sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/llvmtools\/lib\/ld-musl-x86_64.so.1/g' specs

# Check:
grep "/llvmtools/lib/ld-musl-x86_64.so.1" specs  --color=auto

# Install modified specs to the cgnutools toolchain
mv -v specs $SPECFILE
unset SPECFILE

# Set the PATH
export PATH=/cgnutools/bin:/llvmtools/bin:/bin:/usr/bin

# Test GCC of cgnutools toolchain:
echo "int main(){}" > dummy.c
${CMLFS_TARGET}-gcc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /llvmtools'
# Shoud output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# Check if the correct start files are used
grep  'lib.*/crt[1in].*succeeded' dummy.log | cut -d ' ' -f 4-5 | cut -b 5-
# Should output:
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crt1.o succeeded
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crti.o succeeded
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crtn.o succeeded

rm -v dummy.log dummy.c a.out
