# llvmtools: LLVM+clang
# Build and install as cmlfs

cd ${LLVMSRC}
# make sure compiler-rt are unpacked in ${{LLVMSRC}/projects
# and clang & lld in ${LLVMSRC}/tools. No need to unpack libunwind,
# libcxxabi and libcxxabi as all 3 are installed in /llvmtools
rm -rf projects/{libunwind,libcxx,libcxxabi}
rm -rf tools/{clang,lld}
tar xf ../pkgs/compiler-rt-12.0.0.src.tar.xz 
mv compiler-rt-12.0.0.src projects/compiler-rt
tar xf ../pkgs/clang-12.0.0.src.tar.xz 
tar xf ../pkgs/lld-12.0.0.src.tar.xz
mv clang-12.0.0.src tools/clang
mv lld-12.0.0.src   tools/lld

# Apply patches from void linux
cd ${LLVMSRC}/projects/compiler-rt
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-aarch64-ucontext.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-sanitizer-ppc64-musl.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-size_t.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-xray-ppc64-musl.patch
cd ${LLVMSRC}/tools/clang
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-001-fix-unwind-chain-inclusion.patch
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-002-add-musl-triples.patch
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-003-ppc64-dynamic-linker-path.patch
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-004-ppc64-musl-elfv2.patch
cd ${LLVMSRC}
patch  -Np1 -i ../patches/llvm12-void/llvm-001-musl.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-002-musl-ppc64-elfv2.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-003-ppc-secureplt.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-004-override-opt.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-005-ppc-bigpic.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-006-aarch64-mf_exec.patch

# Disable sanitizers for musl systems, per Void Linux... fixes early build failure
sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake

# Fix missing header for lld, https://bugs.llvm.org/show_bug.cgi?id=49228
tar xf ../pkgs/libunwind-12.0.0.src.tar.xz libunwind-12.0.0.src/include/mach-o/compact_unwind_encoding.h
mv libunwind-12.0.0.src/include/mach-o tools/lld/include/
rm -rf libunwind-12.0.0.src/

# Set flags to greatly reduce debugging symbols
export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1" 

# Update host/target triple detection
cp -v ../files/config.guess-musl cmake/config.guess

# Remember to use the configured stage0 clang.
# Make sure to use LLVM's binary tools from cgnutools.
export CONFIG_TOOLS='-DCMAKE_CXX_COMPILER_AR="/cgnutools/bin/llvm-ar" \
                     -DCMAKE_C_COMPILER_AR="/cgnutools/bin/llvm-ar"   \
                     -DCMAKE_CXX_COMPILER_RANLIB="/cgnutools/bin/llvm-ranlib" \
                     -DCMAKE_C_COMPILER_RANLIB="/cgnutools/bin/llvm-ranlib"   \
                     -DCMAKE_LINKER="/cgnutools/bin/ld.lld" \
                     -DCMAKE_NM="/cgnutools/bin/llvm-nm" \
                     -DCMAKE_OBJCOPY="/cgnutools/bin/llvm-objcopy" \
                     -DCMAKE_READELF="/cgnutools/bin/llvm-readelf" \
                     -DCMAKE_STRIP="/cgnutools/bin/llvm-strip" '
# Set the truples...
export CONFIG_TRUPLES='-DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
                       -DLLVM_HOST_TRIPLE="x86_64-cmlfs-linux-musl" \
                       -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" '
# Set the flags for Compiler-rt...
export CONFIG_CRT="-DCOMPILER_RT_BUILD_SANITIZERS=OFF \
                   -DCOMPILER_RT_BUILD_XRAY=OFF \
                   -DCOMPILER_RT_BUILD_PROFILE=OFF \
                   -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
                   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON "

# Set the flags for clang:
export CONFIG_CLANG='-DCLANG_DEFAULT_CXX_STDLIB=libc++ \
                    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
                    -DCLANG_DEFAULT_RTLIB=compiler-rt \
                    -DCLANG_DEFAULT_LINKER="/llvmtools/bin/ld.lld" '

# Turn off unwanted features, docs and tests
export BUILD_OFF="-DLLVM_BUILD_TESTS=OFF \
                  -DLLVM_ENABLE_LIBEDIT=OFF \
                  -DLLVM_ENABLE_LIBXML2=OFF \
                  -DLLVM_INCLUDE_GO_TESTS=OFF \
                  -DLLVM_INCLUDE_TESTS=OFF \
                  -DLLVM_INCLUDE_DOCS=OFF \
                  -DLLVM_INCLUDE_EXAMPLES=OFF \
                  -DLLVM_INCLUDE_BENCHMARKS=OFF \
                  -DLLVM_ENABLE_ZLIB=OFF "

# Turn on features for LLVM...
export CONFIG_LLVM="-DLLVM_LINK_LLVM_DYLIB=ON \
                    -DLLVM_BUILD_LLVM_DYLIB=ON \
                    -DLLVM_ENABLE_LIBCXX=ON \
                    -DLLVM_ENABLE_LLD=ON \
                    -DLLVM_ENABLE_RTTI=ON "
# Set paths...
export CONFIG_PATHS='-DCMAKE_INSTALL_OLDINCLUDEDIR="/llvmtools/include" \
                     -DBacktrace_INCLUDE_DIR="/llvmtools/include" \
                     -DBacktrace_LIBRARY="/llvmtools/lib/libexecinfo.so" \
                     -DICONV_LIBRARY_PATH="/llvmtools/lib/libc.so" '

# Remove old build directory
rm -rf build

# Now configure the source
CC=x86_64-cmlfs-linux-musl-clang    \    
CXX=x86_64-cmlfs-linux-musl-clang++ \ 
cmake -B build \
    -DCMAKE_BUILD_TYPE=Release          \
    -DCMAKE_INSTALL_PREFIX="/llvmtools" \
    -DLLVM_TARGET_ARCH="X86"            \
    -DLLVM_TARGETS_TO_BUILD="X86"       \
    -DDEFAULT_SYSROOT="/llvmtools"      \
    ${CONFIG_TOOLS} ${CONFIG_TRUPLES}   \
    ${CONFIG_CLANG} ${CONFIG_CRT}       \
    ${CONFIG_LLVM}  ${CONFIG_PATHS}     \
    ${BUILD_OFF}

# Compile 
make -C build

# Install
cd build && \
cmake -DCMAKE_INSTALL_PREFIX="/llvmtools" -P cmake_install.cmake

# Some binaries were not installed
#for b in as readobj tblgen
#do
#   cp -v build/llvm-$b /llvmtools/bin/
#done
#ln -sv llvm-readobj /llvmtools/bin/llvm-readelf
cp -v bin/clang-tblgen  /llvmtools/bin/

# Remove the LLVM source as it will not be needed until chroot
cd $CMLFS/source && \
rm -rf llvm

# Configure stage1 clang to build binaries with /llvmtools/lib/ld-musl-x86_64.so.1 instead
# of /lib/ld-musl-x86_64.so.1. This is similar in Musl-LFS/LFS when gcc specs 
# file is modified to use the  dynamic linker in /tools instead of host's /lib
ln -sv clang-12   /llvmtools/bin/x86_64-pc-linux-musl-clang
ln -sv clang-12   /llvmtools/bin/x86_64-pc-linux-musl-clang++
cat > /llvmtools/bin/x86_64-pc-linux-musl.cfg << "EOF"
-Wl,-dynamic-linker /llvmtools/lib/ld-musl-x86_64.so.1
EOF

# Unset these flags
unset CFLAGS CXXFLAGS

# Create script to switch system between LLVM and binutils
# since some packages are hard coded.
cat > /llvmtools/bin/set-llvm-bin-mode << "EOF"
#! /bin/bash
echo "[ 1 / 2 ] Clearing links..."  && \
for b in ar as nm objcopy objdump size strings addr2line ranlib readelf strip
do
  rm -v /llvmtools/bin/$b
done                      && \
echo "[ 2 / 2 ] Setting LLVM as system binary tools..." && \
for b in ar as nm objcopy objdump size strings
do
  ln -sv llvm-$b /llvmtools/bin/$b
done                                          && \
ln -sv llvm-symbolizer /llvmtools/bin/addr2line     && \
ln -sv llvm-ar         /llvmtools/bin/ranlib        && \
ln -sv llvm-readobj    /llvmtools/bin/readelf       && \
ln -sv llvm-objcopy    /llvmtools/bin/strip         && \
echo "[ info  ] LLVM Binary tools set as system default"
EOF

# Some packages are hard coded to use GCC . Create script 
# to set clang/LLVM as system compiler
cat > /llvmtools/bin/set-llvm-mode << "EOF"
#! /bin/bash
echo "[ 1 / 1 ] Setting LLVM as system compiler..." && \
for b in c++ cpp g++ gcc cc
do
  rm -v  /llvmtools/bin/$b
  ln -sv clang-12  /llvmtools/bin/$b
done
rm -v /llvmtools/lib/cpp
ln -sv ../llvmtools/bin/clang-12 /llvmtools/lib/cpp
EOF

# Make the scripts executable
for s in llvm-bin llvm
do
  chmod -v +x /llvmtools/bin/set-$s-mode
done

